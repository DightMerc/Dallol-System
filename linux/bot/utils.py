#!/usr/bin/env python
# -*- coding: utf-8 -*-
from aiogram.utils.helper import Helper, HelperMode, ListItem
import client


class TestStates(Helper):
    mode = HelperMode.snake_case

    STARTED = ListItem()
    LANGUAGE_SET = ListItem()

    TEST_STATE_2 = ListItem()
    TEST_STATE_3 = ListItem()
    TEST_STATE_4 = ListItem()
    TEST_STATE_5 = ListItem()

async def SearchAnnouncement(data):

    _type = data['type']
    prop = data['property']
    area = ""

    if prop!="–ö–≤–∞—Ä—Ç–∏—Ä–∞":
        price = data['price']
        region = data['region']
        room_count = data['room_count']
        area = data['area']
        
    else:
        price = data['price']
        region = data['region']
        room_count = data['room_count']

    return await client.Search(_type, prop, price, region, room_count, area)

    
def OnlineGenerateEndText(data, user):
    _type = data[0]
    _property = data[1]
    _title = data[2]
    _region = data[3]
    _reference = data[4]
    _location = data[5]
    _room_count = data[6]
    _square = data[7]
    _area = data[8]
    _state = data[9]
    _ammount = data[10]
    _add_info = data[11]
    _contact = data[12]
    _main_floor = data[13]
    _floor = data[14]
    _master = data[15]
    _prop_state = data[16]

    ann_number = client.GetLastAnnouncment()

    if client.getUserLanguage(user)=="RU":

        if _type == "sale":
            first_phrase = "–ü—Ä–æ–¥–∞–∂–∞"
        elif _type == "rent":
            first_phrase = "–ê—Ä–µ–Ω–¥–∞"
        else:
            first_phrase = "–ü–æ–∏—Å–∫"


        if _add_info == "None":
            _add_info = ""
        else:
            _add_info = "\n{}\n".format(_add_info)

        if _area == 0:
            _area = ""
        else:
            _area = "–°–æ—Ç–æ–∫: {}\n".format(_area)

        if _property == "–£—á–∞—Å—Ç–æ–∫":
            return "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {}\n–†–∏–µ–ª—Ç–æ—Ä: {}\n\n#{}\n{}\n\n{}\nüîé –û—Ä–∏–µ–Ω—Ç–∏—Ä: {}\n\n–°–æ—Å—Ç–æ—è–Ω–∏–µ: {}\n\n–ö–æ–º–Ω–∞—Ç—ã: {}\n–ü–ª–æ—â–∞–¥—å: {} –∫–≤.–º\n{}\nüíµ –¶–µ–Ω–∞: {} —É.–µ\n{}\nüì± –ö–æ–Ω—Ç–∞–∫—Ç—ã: {}".format(_property.lower(),  _master, first_phrase, _region, _title,_reference, _prop_state, _room_count, _square, _area, _ammount, _add_info, str(_contact).replace("+",""))
        elif _property == "–ö–≤–∞—Ä—Ç–∏—Ä–∞":
            return "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {}\n–†–∏–µ–ª—Ç–æ—Ä: {}\n\n#{}\n{}\n\n{}\nüîé –û—Ä–∏–µ–Ω—Ç–∏—Ä: {}\n\n–°–æ—Å—Ç–æ—è–Ω–∏–µ: {}\n\n–ö–æ–º–Ω–∞—Ç—ã: {}\n–ü–ª–æ—â–∞–¥—å: {} –∫–≤.–º\n–≠—Ç–∞–∂–µ–π –≤ –¥–æ–º–µ: {}\n–≠—Ç–∞–∂ –∫–≤–∞—Ä—Ç–∏—Ä—ã: {}\n\nüíµ –¶–µ–Ω–∞: {} —É.–µ\n{}\nüì± –ö–æ–Ω—Ç–∞–∫—Ç—ã: {}".format(_property.lower(), _master, first_phrase, _region, _title,_reference, _prop_state, _room_count, _square, _main_floor, _floor, _ammount, _add_info, str(_contact).replace("+",""))
        elif _property == "–£—á–∞—Å—Ç–æ–∫ –∑–µ–º–ª–∏":
            return "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {}\n–†–∏–µ–ª—Ç–æ—Ä: {}\n\n#{}\n{}\n\n{}\nüîé –û—Ä–∏–µ–Ω—Ç–∏—Ä: {}\n\n–°–æ—Å—Ç–æ—è–Ω–∏–µ: {}\n{}\nüíµ –¶–µ–Ω–∞: {} —É.–µ\n{}\nüì± –ö–æ–Ω—Ç–∞–∫—Ç—ã: {}".format(_property.lower(), _master, first_phrase, _region, _title,_reference, _prop_state, _area, _ammount, _add_info, str(_contact).replace("+",""))
        elif _property == "–ù–µ–∂–∏–ª–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å":
            return "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {}\n–†–∏–µ–ª—Ç–æ—Ä: {}\n\n#{}\n{}\n\n{}\nüîé –û—Ä–∏–µ–Ω—Ç–∏—Ä: {}\n{}\nüíµ –¶–µ–Ω–∞: {} —É.–µ\n{}\nüì± –ö–æ–Ω—Ç–∞–∫—Ç—ã: {}".format(_property.lower(), _master, first_phrase, _region, _title,_reference, _area, _ammount, _add_info, str(_contact).replace("+",""))
    else:
        if _type == "sale":
            first_phrase = "–°–æ—Ç—É–≤"
        elif _type == "rent":
            first_phrase = "–ò–∂–∞—Ä–∞"
        else:
            first_phrase = "–ö–∏–¥–∏—Ä—É–≤"


        if _add_info == "None":
            _add_info = ""
        else:
            _add_info = "\n{}\n".format(_add_info)
        if _area == 0:
            _area = ""
        else:
            _area = "–°–æ—Ç–æ–∫: {}\n".format(_area)

        if _property == "–£—á–∞—Å—Ç–æ–∫":
            _property = "–•–æ–≤–ª–∏"
            return "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {}\n–†–∏–µ–ª—Ç–æ—Ä: {}\n\n#{}\n{}\n\n{}\nüîé –ú—û–ª–∂–∞–ª: {}\n\n“≤–æ–ª–∞—Ç–∏: {}\n\n–•–æ–Ω–∞–ª–∞—Ä: {}\n–£–º—É–º–∏–π –º–∞–π–¥–æ–Ω–∏: {} –∫–≤.–º\n{}\nüíµ –ù–∞—Ä—Ö: {} —É.–µ\n{}\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: {}".format(_property.lower(),  _master, first_phrase, _region, _title,_reference, _prop_state, _room_count, _square, _area, _ammount, _add_info, str(_contact).replace("+",""))
        elif _property == "–ö–≤–∞—Ä—Ç–∏—Ä–∞":
            return "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {}\n–†–∏–µ–ª—Ç–æ—Ä: {}\n\n#{}\n{}\n\n{}\nüîé –ú—û–ª–∂–∞–ª: {}\n\nn“≤–æ–ª–∞—Ç–∏: {}\n\n–•–æ–Ω–∞–ª–∞—Ä: {}\n–£–º—É–º–∏–π –º–∞–π–¥–æ–Ω–∏: {} –∫–≤.–º\n–£–π–¥–∞ –∫–∞–≤–∞—Ç–ª–∞—Ä: {}\n–ö–∞–≤–∞—Ç: {}\n\nüíµ –ù–∞—Ä—Ö: {} —É.–µ\n{}\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: {}".format(_property.lower(), _master, first_phrase, _region, _title,_reference, _prop_state, _room_count, _square, _main_floor, _floor, _ammount, _add_info, str(_contact).replace("+",""))
        elif _property == "–£—á–∞—Å—Ç–æ–∫ –∑–µ–º–ª–∏":
            _property = "–ï—Ä"
            return "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {}\n–†–∏–µ–ª—Ç–æ—Ä: {}\n\n#{}\n{}\n\n{}\nüîé –ú—û–ª–∂–∞–ª: {}\n\nn“≤–æ–ª–∞—Ç–∏: {}\n{}\nüíµ –ù–∞—Ä—Ö: {} —É.–µ\n{}\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: {}".format(_property.lower(), _master, first_phrase, _region, _title,_reference, _prop_state, _area, _ammount, _add_info, str(_contact).replace("+",""))
        elif _property == "–ù–µ–∂–∏–ª–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å":
            _property = "–£–π-–∂–æ–π—Å–∏–∑ “õ—É—Ä–∏–ª–∏—à"
            return "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {}\n–†–∏–µ–ª—Ç–æ—Ä: {}\n\n#{}\n{}\n\n{}\nüîé –ú—û–ª–∂–∞–ª: {}\n\nn“≤–æ–ª–∞—Ç–∏: {}\n{}\nüíµ –ù–∞—Ä—Ö: {} —É.–µ\n{}\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: {}".format(_property.lower(), _master, first_phrase, _region, _title,_reference, _state, _area, _ammount, _add_info, str(_contact).replace("+",""))



def GenerateEndText(data, mode, user):

    _type = data[0]
    _property = data[1]
    _title = data[2]
    _region = data[3]
    _reference = data[4]
    _location = data[5]
    _room_count = data[6]
    _square = data[7]
    _area = data[8]
    _state = data[9]
    _ammount = data[10]
    _add_info = data[11]
    _contact = data[12]
    _main_floor = data[13]
    _floor = data[14]

    if mode:
        ann_number = data[13]
    else:
        ann_number = client.GetLastAnnouncment()

    if client.getUserLanguage(user)=="RU":


        first_phrase = "–ü—Ä–æ–¥–∞–µ—Ç—Å—è"
        if _type == "sale":
            pass
        else:
            first_phrase = "–°–¥–∞–µ—Ç—Å—è –≤ –∞—Ä–µ–Ω–¥—É"

        if _add_info == "None":
            _add_info = ""
        else:
            _add_info = "\n{}\n".format(_add_info)

        if _area == 0:
            _area = ""
        else:
            _area = "\n–°–æ—Ç–æ–∫: {}\n".format(_area)

        if _property == "–£—á–∞—Å—Ç–æ–∫":
            return "‚Ññ{} {} {}\n{}\n\n{}\nüîé –û—Ä–∏–µ–Ω—Ç–∏—Ä: {}\n\n–ö–æ–º–Ω–∞—Ç—ã: {}\n–ü–ª–æ—â–∞–¥—å: {} –∫–≤.–º\n{}\nüíµ –¶–µ–Ω–∞: {} —É.–µ\n{}\nüì± –ö–æ–Ω—Ç–∞–∫—Ç—ã: {}".format(ann_number, first_phrase,_property.lower(), _region, _title,_reference, _room_count, _square, _area, _ammount, _add_info, str(_contact).replace("+",""))
        elif _property == "–ö–≤–∞—Ä—Ç–∏—Ä–∞":
            return "‚Ññ{} {} {}\n{}\n\n{}\nüîé –û—Ä–∏–µ–Ω—Ç–∏—Ä: {}\n\n–ö–æ–º–Ω–∞—Ç—ã: {}\n–ü–ª–æ—â–∞–¥—å: {} –∫–≤.–º\n–≠—Ç–∞–∂–µ–π –≤ –¥–æ–º–µ: {}\n–≠—Ç–∞–∂ –∫–≤–∞—Ä—Ç–∏—Ä—ã: {}\n\nüíµ –¶–µ–Ω–∞: {} —É.–µ\n{}\nüì± –ö–æ–Ω—Ç–∞–∫—Ç—ã: {}".format(ann_number, first_phrase,_property.lower(), _region, _title,_reference, _room_count, _square, _main_floor, _floor, _ammount, _add_info, str(_contact).replace("+",""))
        elif _property == "–£—á–∞—Å—Ç–æ–∫ –∑–µ–º–ª–∏":
            return "‚Ññ{} {} {}\n{}\n\n{}\nüîé –û—Ä–∏–µ–Ω—Ç–∏—Ä: {}\n{}\nüíµ –¶–µ–Ω–∞: {} —É.–µ\n{}\nüì± –ö–æ–Ω—Ç–∞–∫—Ç—ã: {}".format(ann_number, first_phrase,_property.lower(), _region, _title,_reference, _area, _ammount, _add_info, str(_contact).replace("+",""))
        elif _property == "–ù–µ–∂–∏–ª–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å":
            return "‚Ññ{} {} {}\n{}\n\n{}\nüîé –û—Ä–∏–µ–Ω—Ç–∏—Ä: {}\n{}\nüíµ –¶–µ–Ω–∞: {} —É.–µ\n{}\nüì± –ö–æ–Ω—Ç–∞–∫—Ç—ã: {}".format(ann_number, first_phrase,_property.lower(), _region, _title,_reference, _area, _ammount, _add_info, str(_contact).replace("+",""))
    else:

        first_phrase = "—Å–æ—Ç–∏–ª–∞–¥–∏"
        if _type == "sale":
            pass
        else:
            first_phrase = "–∏–∂–∞—Ä–∞–≥–∞"

        if _add_info == "None":
            _add_info = ""
        else:
            _add_info = "\n{}\n".format(_add_info)

        if _area == 0:
            _area = ""
        else:
            _area = "\n–°–æ—Ç–æ–∫: {}\n".format(_area)

        if _property == "–£—á–∞—Å—Ç–æ–∫":
            _property = "–•–æ–≤–ª–∏"
            return "‚Ññ{} {} {}\n{}\n\n{}\nüîé –ú—û–ª–∂–∞–ª: {}\n\n–•–æ–Ω–∞–ª–∞—Ä: {}\n–£–º—É–º–∏–π –º–∞–π–¥–æ–Ω–∏: {} –∫–≤.–º\n{}\nüíµ –ù–∞—Ä—Ö: {} —É.–µ\n{}\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: {}".format(ann_number, _property.lower(), first_phrase, _region, _title,_reference, _room_count, _square, _area, _ammount, _add_info, str(_contact).replace("+",""))
        elif _property == "–ö–≤–∞—Ä—Ç–∏—Ä–∞":
            return "‚Ññ{} {} {}\n{}\n\n{}\nüîé –ú—û–ª–∂–∞–ª: {}\n\n–•–æ–Ω–∞–ª–∞—Ä: {}\n–£–º—É–º–∏–π –º–∞–π–¥–æ–Ω–∏: {} –∫–≤.–º\n–£–π–¥–∞ –∫–∞–≤–∞—Ç–ª–∞—Ä: {}\n–ö–∞–≤–∞—Ç: {}\n\nüíµ –ù–∞—Ä—Ö: {} —É.–µ\n{}\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: {}".format(ann_number, _property.lower(), first_phrase, _region, _title,_reference, _room_count, _square, _main_floor, _floor, _ammount, _add_info, str(_contact).replace("+",""))
        elif _property == "–£—á–∞—Å—Ç–æ–∫ –∑–µ–º–ª–∏":
            _property = "–ï—Ä"
            return "‚Ññ{} {} {}\n{}\n\n{}\nüîé –ú—û–ª–∂–∞–ª: {}\n{}\nüíµ –ù–∞—Ä—Ö: {} —É.–µ\n{}\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: {}".format(ann_number, _property.lower(), first_phrase, _region, _title,_reference, _area, _ammount, _add_info, str(_contact).replace("+",""))
        elif _property == "–ù–µ–∂–∏–ª–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å":
            _property = "–£–π-–∂–æ–π—Å–∏–∑ “õ—É—Ä–∏–ª–∏—à"
            return "‚Ññ{} {} {}\n{}\n\n{}\nüîé –ú—û–ª–∂–∞–ª: {}\n{}\nüíµ –ù–∞—Ä—Ö: {} —É.–µ\n{}\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: {}".format(ann_number, _property.lower(), first_phrase, _region, _title,_reference, _area, _ammount, _add_info, str(_contact).replace("+",""))
    


if __name__ == '__main__':
    print(TestStates.all())


